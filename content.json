{"pages":[{"title":"friends","text":"","link":"/friends/index.html"},{"title":"关于俺的一点点碎碎念","text":"哈喽，大家好，欢迎来到弗蕾西！ 先说一下搭建这个博客的初衷：主要是想要在互联网上留下一些属于自己的印记，所以博客会以学习记录为主。最主要的还是记录学习过程中遇到的一些困难以及怎样解决它们的亦或是总结知识点、记录学习收获这类内容。反正只要是我觉得值得记录的东西，不管文字多或少我都会记录下来，因为它们都是我成长的一部分，以后回顾起来，肯定别有一番感觉。 再来介绍一下俺自己。俺目前正在学习前端中，属于很菜鸡的那种…目前正在努力中，今年一定要找到工作！自律性比较差，学习热情时高时低，时不时会反思一下自己。个人是比较肥宅的，爱好网上冲浪，屁话超多。但是对事物充满兴趣，也算是长跑型选手吧，有时也会去填填以前挖的坑，跑得不快但是会努力争取跑完(说到这里，我想到我以前小学的时候田径队暑假训练连测三次400米，每次我的速度几乎都只相差几秒这样，体育老师说我耐力很好但是跑得不快有啥用== 说如果我参加爬长城的话，就算我登顶了但也是最后一个登顶的…嗨呀，俺也不知道俺突然说这一段干啥hhh) 最后立个Flag吧~ 其实很早以前就有搭博客的意识了，但是总是花了时间捣鼓了好几天就没下文了，下一次开始时又重头再来…希望这次不要删掉了，有困难就解决，解决不了就过段时间再解决，千万不要再删除重新再来了== 加油 No one can help me, except me. 2020年4月26日","link":"/about/index.html"}],"posts":[{"title":"JavaScript中的数据类型","text":"数据类型分类JavaScript中共有8种数据类型 number bigint string boolean null undefined symbol object 数据类型简述基本数据类型number数值类型，可以表示整数或者小数。除了常规的数字外，还包括”特殊数值”：Infinity、-Infinity、NaN123456var num1 = 1;var num2 = 1.3;alert(1/0); //Infinityalert(Infinity); //Infinityalert(\"hhh\"/1); //NaN NaN表示一个计算错误。作用是为了使得数学运算是安全的，从而脚本不会因为错误的运算而停止typeof num1; //\"number\" string字符串类型，必须放在引号中 双引号：”Flecy” 单引号： ‘Flecy’ 反引号： `Flecy`单引号双引号无区别，反引号是功能扩展引号，允许将变量和表达式包装在${…}中，然后嵌入到字符串中。 1234var name = \"Flecy\";alert(`Hi, ${name}`); // \"Hi, Flecy\"alert(`${1+2}`); //3 boolean只包含两个值：true和false 12var result = true;typeof result; //\"boolean\" null只含null一个值 12var result = null;typeof result; //\"object\" null不是一个object,null有自己的类型，它就是一个特殊值，typeof null的结果为”object”是JavaScript语言的一个错误，为了兼容性保留下来了。 undefined只含undefined一个值,undefined的含义是未被赋值。如果一个变量已经被声明，但没有赋值，那么它的值就是undefined。 12var result;typeof result; //\"undefined\" 复杂数据类型object各种值组成的集合，用于存储数据集合和更复杂的实体 12345678var blog = { name: \"弗蕾西\", domain: \"manylu.com\", owner: \"Flecy\", age: 1};typeof blog; // \"object\" 新增加的数据类型不太想把这两个数据类型放在基本数据类型中，也算是为了更好的区分JS的变化吧，所以单独把它们放在第三类中。 bigint用于表示任意长度的整数，在JavaScript中，”number”类型无法代表大于2^53(或小于-2^53)的整数。通过将n添加到整数字段末尾来创建bigint类型。 12var bigInt = 123456789n;typeof bigInt; // \"bigint\" 存在兼容性问题：Firefox和Chrome已经支持bigint了，但是Safari/IE/Edge还没有 symbol用于创建对象的唯一标识符因为ES5的对象属性名都是字符串，为了保证每个属性的名字都是独一无二的，从根本上防止属性名的冲突，引入了symbol类型symbol值通过Symbol函数生成 12var s = symbol();typeof s; // \"symbol\" Symbol函数前不能使用new命令，否则会报错，因为生成的symbol是一个原始类型的值，不是对象。 typeof运算符typeof运算符可以返回一个值的数据类型除了上面代码中返回的类型外，函数也会特别返回 123typeof alert; // \"function\"typeof []; // \"object\"typeof {}; // \"object\" JavaScript中没有一个特别的”function”类型，函数隶属于object类型，但是typeof会对函数区别对待typeof区分不了对象的细节，是数组或者是其他对象，只能确定对象的大类 typeof可以用来检查一个没有声明的变量而不会报错 123t; // Uncaught ReferenceError: t is not definedtypeof t; // \"undefined\"","link":"/2020/04/28/JavaScript%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/04/18/hello-world/"}],"tags":[{"name":"js","slug":"js","link":"/tags/js/"}],"categories":[{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"基础","slug":"前端/基础","link":"/categories/%E5%89%8D%E7%AB%AF/%E5%9F%BA%E7%A1%80/"}]}